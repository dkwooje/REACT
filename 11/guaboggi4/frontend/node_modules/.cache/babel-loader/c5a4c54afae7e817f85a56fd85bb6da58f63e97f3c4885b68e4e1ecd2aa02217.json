{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user1\\\\Desktop\\\\react.nodejs\\\\11\\\\guaboggi3\\\\frontend\\\\src\\\\App.js\";\nimport { Route, RouterProvider, createBrowserRouter } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport EventsPage from './pages/Events';\nimport EventDetailPage from './pages/EventDetailPage';\nimport NewEventPage from './pages/NewEventPage';\nimport EditEventPage from './pages/EditEventPage';\nimport RootLayout from './pages/Root';\nimport EventsRootLayout from './pages/EventsRoot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 24\n  }, this),\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 31\n    }, this)\n  }, {\n    path: 'events',\n    element: /*#__PURE__*/_jsxDEV(EventsRootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 33\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 31\n      }, this),\n      loader: async () => {\n        const response = await fetch('http://localhost:3000/events');\n        if (!response.ok) {} else {\n          const resData = await response.json();\n          return resData.events; // backend data파일의 events라는 키에 넘겨준다.\n        }\n      }\n    },\n    //http 리퀘스트를 발생시키는 컴포넌트(데이터를 가져옴), Loader : 렌더링 되기 직전\n    {\n      path: ':eventId',\n      element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 35\n      }, this)\n    }, {\n      path: 'new',\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 30\n      }, this)\n    }, {\n      path: ':eventId/edit',\n      element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 40\n      }, this)\n    }]\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Route","RouterProvider","createBrowserRouter","HomePage","EventsPage","EventDetailPage","NewEventPage","EditEventPage","RootLayout","EventsRootLayout","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","loader","response","fetch","ok","resData","json","events","App","_c","$RefreshReg$"],"sources":["C:/Users/user1/Desktop/react.nodejs/11/guaboggi3/frontend/src/App.js"],"sourcesContent":["import {Route, RouterProvider, createBrowserRouter} from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport EventsPage from './pages/Events';\nimport EventDetailPage from './pages/EventDetailPage';\nimport NewEventPage from './pages/NewEventPage';\nimport EditEventPage from './pages/EditEventPage';\nimport RootLayout from './pages/Root';\nimport EventsRootLayout from './pages/EventsRoot';\n\nconst router = createBrowserRouter([\n  {path: '/', element: <RootLayout/>,\n    children:[\n      {index: true , element: <HomePage/>},\n      {path: 'events', element: <EventsRootLayout />,\n      children: [\n      {index: true , element: <EventsPage />, loader: async () => {\n\n        const response = await fetch('http://localhost:3000/events');\n\n        if(!response.ok){\n          \n        }else{\n          const resData = await response.json();\n            return resData.events;  // backend data파일의 events라는 키에 넘겨준다.\n        }\n      },\n     },  //http 리퀘스트를 발생시키는 컴포넌트(데이터를 가져옴), Loader : 렌더링 되기 직전\n      {path: ':eventId', element: <EventDetailPage />},\n      {path: 'new', element: <NewEventPage/>},\n      {path: ':eventId/edit', element: <EditEventPage />} \n      ]\n      }\n    ]\n  }\n]);\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n\n"],"mappings":";AAAA,SAAQA,KAAK,EAAEC,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AAC3E,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,UAAU,MAAM,gBAAgB;AACvC,OAAOC,eAAe,MAAM,yBAAyB;AACrD,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,gBAAgB,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,MAAM,GAAGV,mBAAmB,CAAC,CACjC;EAACW,IAAI,EAAE,GAAG;EAAEC,OAAO,eAAEH,OAAA,CAACH,UAAU;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;EAChCC,QAAQ,EAAC,CACP;IAACC,KAAK,EAAE,IAAI;IAAGN,OAAO,eAAEH,OAAA,CAACR,QAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,CAAC,EACpC;IAACL,IAAI,EAAE,QAAQ;IAAEC,OAAO,eAAEH,OAAA,CAACF,gBAAgB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAC9CC,QAAQ,EAAE,CACV;MAACC,KAAK,EAAE,IAAI;MAAGN,OAAO,eAAEH,OAAA,CAACP,UAAU;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MAAEG,MAAM,EAAE,MAAAA,CAAA,KAAY;QAE1D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAE5D,IAAG,CAACD,QAAQ,CAACE,EAAE,EAAC,CAEhB,CAAC,MAAI;UACH,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UACnC,OAAOD,OAAO,CAACE,MAAM,CAAC,CAAE;QAC5B;MACF;IACD,CAAC;IAAG;IACH;MAACd,IAAI,EAAE,UAAU;MAAEC,OAAO,eAAEH,OAAA,CAACN,eAAe;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,CAAC,EAChD;MAACL,IAAI,EAAE,KAAK;MAAEC,OAAO,eAAEH,OAAA,CAACL,YAAY;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC,CAAC,EACvC;MAACL,IAAI,EAAE,eAAe;MAAEC,OAAO,eAAEH,OAAA,CAACJ,aAAa;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,CAAC;EAEnD,CAAC;AAEL,CAAC,CACF,CAAC;AAEF,SAASU,GAAGA,CAAA,EAAG;EACb,oBAAOjB,OAAA,CAACV,cAAc;IAACW,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3C;AAACW,EAAA,GAFQD,GAAG;AAIZ,eAAeA,GAAG;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}