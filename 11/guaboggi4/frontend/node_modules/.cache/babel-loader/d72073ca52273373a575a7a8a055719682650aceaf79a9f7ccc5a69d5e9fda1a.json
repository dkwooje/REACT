{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user1\\\\Desktop\\\\react.nodejs\\\\11\\\\guaboggi3\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData(); // loader에서 반환된 데이터를 가져옴\n\n  // data가 undefined이거나 에러일 경우 처리\n  if (!data || data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: (data === null || data === void 0 ? void 0 : data.message) || '데이터를 가져오는 중 문제가 발생했습니다.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 올바르게 events 배열로 접근\n  const events = data;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch(\"http://localhost:3000/events\");\n  if (!response.ok) {\n    // HTTP 요청이 실패하면 에러를 던짐\n    throw {\n      isError: true,\n      message: '데이터를 가져오는데 실패하였습니다.'\n    };\n  }\n\n  // 응답을 JSON 형태로 변환하여 반환\n  const resData = await response.json();\n\n  // 데이터 구조가 올바른지 확인하고 반환\n  return resData.events;\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loader","response","fetch","ok","resData","json","$RefreshReg$"],"sources":["C:/Users/user1/Desktop/react.nodejs/11/guaboggi3/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const data = useLoaderData();  // loader에서 반환된 데이터를 가져옴\n\n  // data가 undefined이거나 에러일 경우 처리\n  if (!data || data.isError) {\n    return <p>{data?.message || '데이터를 가져오는 중 문제가 발생했습니다.'}</p>;\n  }\n\n  // 올바르게 events 배열로 접근\n  const events = data; \n\n  return <EventsList events={events} />;\n}\n\nexport default EventsPage;\n\nexport async function loader() {\n  const response = await fetch(\"http://localhost:3000/events\");\n\n  if (!response.ok) {\n    // HTTP 요청이 실패하면 에러를 던짐\n    throw { isError: true, message: '데이터를 가져오는데 실패하였습니다.' };\n  }\n\n  // 응답을 JSON 형태로 변환하여 반환\n  const resData = await response.json();\n\n  // 데이터 구조가 올바른지 확인하고 반환\n  return resData.events;\n}"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGN,aAAa,CAAC,CAAC,CAAC,CAAE;;EAE/B;EACA,IAAI,CAACM,IAAI,IAAIA,IAAI,CAACC,OAAO,EAAE;IACzB,oBAAOJ,OAAA;MAAAK,QAAA,EAAI,CAAAF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,OAAO,KAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC5D;;EAEA;EACA,MAAMC,MAAM,GAAGR,IAAI;EAEnB,oBAAOH,OAAA,CAACF,UAAU;IAACa,MAAM,EAAEA;EAAO;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC;AAACR,EAAA,CAZQD,UAAU;EAAA,QACJJ,aAAa;AAAA;AAAAe,EAAA,GADnBX,UAAU;AAcnB,eAAeA,UAAU;AAEzB,OAAO,eAAeY,MAAMA,CAAA,EAAG;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAM;MAAEZ,OAAO,EAAE,IAAI;MAAEE,OAAO,EAAE;IAAsB,CAAC;EACzD;;EAEA;EACA,MAAMW,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;;EAErC;EACA,OAAOD,OAAO,CAACN,MAAM;AACvB;AAAC,IAAAC,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}