{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user1\\\\Desktop\\\\react.nodejs\\\\11\\\\guaboggi6\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { Suspense } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n\n  // if(data.isError){\n  //   return <p>{data.message}</p>\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"\\uD398\\uC774\\uC9C0\\uB97C \\uC77D\\uC5B4\\uC624\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 23\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => {\n        /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 9\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 3\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({message: '데이터를 가져오는데 실패하였습니다.'}),{status:500},);\n    throw json({\n      message: \"데이터를 가져오는데 실패하였습니다.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\n\n/*\r\nexport async function loader() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({message: '데이터를 가져오는데 실패하였습니다.'}),{status:500},);\r\n    throw json(\r\n      { message: \"데이터를 가져오는데 실패하였습니다.\" },\r\n      { status: 500 }\r\n    );\r\n  } else {\r\n    return response;\r\n  }\r\n \r\n}\r\n\r\n   */\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","Suspense","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/Users/user1/Desktop/react.nodejs/11/guaboggi6/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from \"react-router-dom\";\r\nimport EventsList from \"../components/EventsList\";\r\nimport { Suspense } from \"react\";\r\n\r\nfunction EventsPage() {\r\n  const {events} = useLoaderData();\r\n\r\n  // if(data.isError){\r\n  //   return <p>{data.message}</p>\r\n  // }\r\n\r\n  return (\r\n  <Suspense fallback={<p style={{textAlign: 'center'}}>페이지를 읽어오고 있습니다... </p>}>\r\n    <Await resolve={events}>\r\n      {(loadedEvents) => { \r\n        <EventsList events={loadedEvents} />;\r\n        }}\r\n    </Await>\r\n  </Suspense>\r\n  );\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\nif (!response.ok) {\r\n  // throw new Response(JSON.stringify({message: '데이터를 가져오는데 실패하였습니다.'}),{status:500},);\r\n  throw json(\r\n    { message: \"데이터를 가져오는데 실패하였습니다.\" },\r\n    { status: 500 }\r\n  );\r\n} else {\r\n  return response;\r\n  }\r\n}\r\n\r\nexport  function loader() {\r\n  return defer({\r\n    events: loadEvents()\r\n  });\r\n}\r\n\r\n\r\n\r\n/*\r\nexport async function loader() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({message: '데이터를 가져오는데 실패하였습니다.'}),{status:500},);\r\n    throw json(\r\n      { message: \"데이터를 가져오는데 실패하였습니다.\" },\r\n      { status: 500 }\r\n    );\r\n  } else {\r\n    return response;\r\n  }\r\n \r\n}\r\n\r\n   */"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAM,CAAC,GAAGV,aAAa,CAAC,CAAC;;EAEhC;EACA;EACA;;EAEA,oBACAO,OAAA,CAACF,QAAQ;IAACM,QAAQ,eAAEJ,OAAA;MAAGK,KAAK,EAAE;QAACC,SAAS,EAAE;MAAQ,CAAE;MAAAC,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,eAC1EP,OAAA,CAACJ,KAAK;MAACgB,OAAO,EAAET,MAAO;MAAAI,QAAA,EACnBM,YAAY,IAAK;QACjB,aAAAb,OAAA,CAACH,UAAU;UAACM,MAAM,EAAEU;QAAa;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACpC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;AAACT,EAAA,CAhBQD,UAAU;EAAA,QACAR,aAAa;AAAA;AAAAqB,EAAA,GADvBb,UAAU;AAkBnB,eAAeA,UAAU;AAEzB,eAAec,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE9D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAMxB,IAAI,CACR;MAAEyB,OAAO,EAAE;IAAsB,CAAC,EAClC;MAAEC,MAAM,EAAE;IAAI,CAChB,CAAC;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACf;AACF;AAEA,OAAQ,SAASK,MAAMA,CAAA,EAAG;EACxB,OAAO1B,KAAK,CAAC;IACXQ,MAAM,EAAEY,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}